(map insert-fn (->> ips (drop (dec @skip) ,,,) (take 2000 ,,,)))
(require '[create-soil-database.soilmap :as sm] :reload)
(insert-them ips)
(require '[create-soil-database.soilmap :as sm] :reload)
(insert-them ips)
(first ips)
(require '[create-soil-database.soilmap :as sm] :reload)
(insert-them ips)
(require '[create-soil-database.soilmap :as sm] :reload)
(insert-them ips)
(require '[create-soil-database.soilmap :as sm] :reload)
(insert-them ips)
(require '[create-soil-database.soilmap :as sm] :reload)
(insert-them ips)
(require '[create-soil-database.soilmap :as sm] :reload)
(insert-them ips 0)
(insert-them ips 25899)
(insert-them ips 25900)
(insert-them ips 28576)
(insert-them ips 30261)
(insert-them ips 34816)
(insert-them ips 34817)
(require '[create-soil-database.soilmap :as sm] :reload)
(reset! iseq-counter 36092)
(insert-them ips)
(insert-them ips 36093)
@iseq-counter
(reset! iseq-counter 44727)
(insert-them ips (inc @iseq-counter))
@iseq-counter
(reset! iseq-counter 44816)
(insert-them ips (inc @iseq-counter))
@iseq-counter
(require '[create-soil-database.soilmap :as sm] :reload)
(reset! iseq-counter 46372)
@iseq-counter
(insert-them ips (inc @iseq-counter))
@iseq-counter
(require '[create-soil-database.soilmap :as sm] :reload)
@iseq-counter
(reset! iseq-counter 46736)
(insert-them ips (inc @iseq-counter))
@iseq-counter
(insert-them ips (inc @iseq-counter))
(first (drop 48135 ips))
(first (drop 48136 ips))
(last x)
(last ips)
(last (for [p x p* p] p*))
(last (for [p x p* (:poly p)] p*))
(last (for [p x] (:id p)))
(last (for [p x] (:poly p)))
(last (flatten (for [p x] (:poly p))))
(reset! iseq-counter 0)
(insert-them (:poly (nth x 0) (inc @iseq-counter)))
(require '[create-soil-database.soilmap :as sm] :reload)
(reset! isc 0)
(swap! isc inc)
(reset! isc 0)
(insert-them (:poly (nth x (dec (swap! isc inc)))))
(dotimes [n 5] (insert-them (:poly (nth x (dec (swap! isc inc))))))
(dotimes [n 100] (insert-them (:poly (nth x (dec (swap! isc inc))))))
(dotimes [n 20] (insert-them (:poly (nth x (dec (swap! isc inc))))))
(dotimes [n 50] (insert-them (:poly (nth x (dec (swap! isc inc))))))
@isc
(dotimes [n 50] (insert-them (:poly (nth x (dec (swap! isc inc))))))
(dotimes [n 100] (insert-them (:poly (nth x (dec (swap! isc inc))))))
(dotimes [n 300] (insert-them (:poly (nth x (dec (swap! isc inc))))))
@isc
(first (drop x 495))
(first x)
(nth x 495)
(nth x 494)
(:poly (nth x 494))
(dotimes [n 100] (insert-them (:poly (nth x (dec (swap! isc inc))))))
@isc
(:poly (nth x (dec @isc))
)
(:poly (nth x (dec @isc)))
(dotimes [n 100] (insert-them (:poly (nth x (dec (swap! isc inc))))))
@isc
(reset! isc 633)
(dotimes [n 100] (insert-them (:poly (nth x (dec (swap! isc inc))))))
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly))
(dotimes [n 100] (insert-them (:poly (nth x (dec (swap! isc inc))))))
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly))
(reset! isc 633)
(dotimes [n 100] (insert-them (:poly (nth x (dec (swap! isc inc))))))
(reset! isc 634)
(dotimes [n 100] (insert-them (:poly (nth x (dec (swap! isc inc))))))
@isc
(def y (drop 688 x))
(first y)
(reset! isc 0)
(dotimes [n 100] (insert-them (:poly (nth y (dec (swap! isc inc))))))
db
(kdb/sqlite3 {:db "carbiocial.sqlite"})
@isc
(:id (nth x 900))
(:id (nth x 1000))
(:id (nth x 980))
(:id (nth x 970))
(:id (nth x 969))
(require 'create-soil-database.soilmap)
(require '[create-soil-database.soilmap :as sm] :reload)
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly))
(reset! isc 969)
(dotimes [n 100] (insert-them* (:poly (nth y (dec (swap! isc inc))))))
(dotimes [n 100] (insert-them* (:poly (nth x (dec (swap! isc inc))))))
@isc
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly))
(:poly (nth x 1030))
(:poly (nth x 1029))
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly))
(:poly (nth x 1029))
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly))
(def bla (atom 0))
(nth (:poly (nth x 1029)) (dec (swap! bla inc)))
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly))
(reset! bla 0)
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly))
(nth (:poly (nth x 1029)) (dec (swap! bla inc)))
(require '[create-soil-database.soilmap :as sm] :reload)
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly))
(first x)
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly*))
(first x)
(partition 2 [1 2 3 4 5 6])
(require '[create-soil-database.soilmap :as sm] :reload)
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly*))
(first x)
(:poly (nth x 1029))
(require '[create-soil-database.soilmap :as sm] :reload)
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly*))
(insert-all x)
(require '[create-soil-database.soilmap :as sm] :reload)
(j/query sqlite-db (s/select [:lat_times_10000 :long_times_10000] :soil_data (s/where {:horion_id 1})))
(j/query sqlite-db (s/select [:lat_times_10000 :long_times_10000] :soil_data (s/where {:horizon_id 1})))
(count *1)
(require '[create-soil-database.soilmap :as sm] :reload)
(create-js)
(create-js x)
(require '[create-soil-database.soilmap :as sm] :reload)
(create-js x)
(create-js (take 3 x))
(require '[create-soil-database.soilmap :as sm] :reload)
(create-js (take 3 x))
(create-js (take 100 x))
(require '[create-soil-database.soilmap :as sm] :reload)
(create-js (take 100 x))
(require '[create-soil-database.soilmap :as sm] :reload)
(create-js (take 100 x))
(create-js x)
(require '[create-soil-database.soilmap :as sm] :reload)
(create-js x)
(require '[create-soil-database.soilmap :as sm] :reload)
(create-js x)
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly*))
(create-js x)
(first x)
(require '[create-soil-database.soilmap :as sm] :reload)
(def x (-> parsed-csv rest step-1-csv-to-seq))
(first x)
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly))
(first x)
(create-js x)
(def x (-> parsed-csv rest step-1-csv-to-seq))
(create-js x)
(require '[create-soil-database.soilmap :as sm] :reload)
(def x (-> parsed-csv rest step-1-csv-to-seq step-2-seq-to-parse-poly))
(create-js x)
(require '[create-soil-database.soilmap :as sm] :reload)
(def y (profile-regions-mapping-to-insert-seq))
(first y)
(def y* (slurp "profile-2-region-id.txt"))
(first y*)
(take 1000 y*)
y*
(edn/read-string y*)
(def y* (slurp "profile-2-region-id.txt"))
(edn/read-string y*)
(edn/read-string "[{:region-id 1013 :lat10000 -68833 :lng10000 -544833} {:region-id 339 :lat10000 -46333 :lng10000 -474833}]")
(edn/read-string (str "[" y* "]")
)
(def y* (profile-regions-mapping-to-insert-seq))
(first y*)
(map (fn [m] (println m)) (edn/read-string (str "[" y* "]"))
)
(map (fn [m] (println m)) (edn/read-string (str "[" y* "]")))
(def y* (slurp "profile-2-region-id.txt"))
(map (fn [m] (println m)) (edn/read-string (str "[" y* "]")))
(map (fn [m] m) (edn/read-string (str "[" y* "]")))
(def y* (slurp "profile-2-region-id.txt"))
(take 10 y*)
(def y* (slurp "profile-2-region-id.txt"))
(take 10 y*)
(def y* (slurp "profile-2-region-id.txt"))
(take 10 y*)
(def y* (slurp "profile-2-region-id.txt"))
(take 10 y*)
(def y* (slurp "profile-2-region-id.txt"))
(take 10 y*)
(def y* (slurp "profile-2-region-id.txt"))
(take 10 y*)
(def y* (slurp "profile-2-region-id.txt"))
(take 10 y*)
(def y (profile-regions-mapping-to-insert-seq))
(take 2 y)
(require '[create-soil-database.soilmap :as sm] :reload)
(insert-profile-2-region-mapping (rest y))
(require '[create-soil-database.soilmap :as sm] :reload)
(def y* (profile-regions-mapping-to-insert-seq :rid :lat :lng))
(second y*)
(check-for-duplicates (rest y*))
(map println *1)
(require '[create-soil-database.soilmap :as sm] :reload)
(def x (apply-steps))
(first x)
(require '[create-soil-database.soilmap :as sm] :reload)
(check-for-duplicates (rest y*))
(first y*)
(def bla (apply-steps))
(first bla)
(def bla* (region-id-to-no-of-points bla))
(first bla*)
(take 10  bla*)
(bla* 1056)
(require '[create-soil-database.soilmap :as sm] :reload)
(check-for-duplicates (rest y*))
(require '[create-soil-database.soilmap :as sm] :reload)
(check-for-duplicates (rest y*))
(require '[create-soil-database.soilmap :as sm] :reload)
(check-for-duplicates (rest y*))
(require '[create-soil-database.soilmap :as sm] :reload)
(check-for-duplicates (rest y*))
(require '[create-soil-database.soilmap :as sm] :reload)
(check-for-duplicates (rest y*))
(map println *1)
(require '[create-soil-database.soilmap :as sm] :reload)
(map println *1)
(check-for-duplicates (rest y*))
(map println *1)
(require '[create-soil-database.soilmap :as sm] :reload)
(check-for-duplicates (rest y*))
(require '[create-soil-database.soilmap :as sm] :reload)
(check-for-duplicates (rest y*))
(require '[create-soil-database.soilmap :as sm] :reload)
(filter-out-duplicates (rest y*))
(require '[create-soil-database.soilmap :as sm] :reload)
(filter-out-duplicates (rest y*))
(get-duplicates *1)
(map println *1)
(def riseq (apply-steps))
(first riseq
)
(get-duplicates riseq)
(require '[create-soil-database.soilmap :as sm] :reload)
(def riseq (apply-steps))
(get-duplicates riseq)
(def riseq (profile-regions-mapping-to-insert-seq))
(first riseq)
(second riseq)
(require '[create-soil-database.soilmap :as sm] :reload)
(def riseq (profile-regions-mapping-to-insert-seq))
(first riseq)
(get-duplicates riseq)
(def ds (filter-out-duplicates riseq))
(first ds)
(require '[create-soil-database.soilmap :as sm] :reload)
(count ds)
(get-duplicates ds)
(insert-profile-2-region-mapping ds)
(first parsed-csv)
(require 'create-soil-database.core)
(in-ns 'create-soil-database.core)
(first parsed-csv)
(ns 'create-soil-database.core)
(require '[create-soil-database.core :as c] :reload)
(first c/parsed-csv)
(first insert-seq)
(first c/insert-seq)
(first (:iseq c/insert-seq))
(require '[create-soil-database.core :as c] :reload)
(first (:iseq c/insert-seq))
(map :soil-class-id (take (:iseq c/insert-seq) 10))
(map :soil-class-id (take 10 (:iseq c/insert-seq)))
(map :soil_class_id (take 10 (:iseq c/insert-seq)))
(map :soil_class_id (take 100 (:iseq c/insert-seq)))
(map :soil_class_id (take 1000 (:iseq c/insert-seq)))
(:soil-classes-iseq c/insert-seq)
(require '[create-soil-database.core :as c] :reload)
(:soil-classes-iseq c/insert-seq)
(first (:iseq c/insert-seq))
(require '[create-soil-database.core :as c] :reload)
(first (:iseq c/insert-seq))
(map :soil_class_id (take 10 (:iseq c/insert-seq)))
(map :soil_class_id (take 300 (:iseq c/insert-seq)))
(require '[create-soil-database.core :as c] :reload)
((:soil-classes-iseq c/insert-seq))
(:soil-classes-iseq c/insert-seq)
(require '[create-soil-database.core :as c] :reload)
(first c/insert-seq*)
(c/soil-classes-to-id insert-seq*)
(c/soil-classes-to-id c/insert-seq*)
(require '[create-soil-database.core :as c] :reload)
(c/soil-classes-to-id c/insert-seq*)
(require '[create-soil-database.core :as c] :reload)
(c/soil-classes-to-id c/insert-seq*)
(require '[create-soil-database.core :as c] :reload)
(c/soil-classes-to-id c/insert-seq*)
(require '[clojure.pprint :as pp])
(c/soil-classes-to-id c/insert-seq*)
(pp/pprint *1)
(count *2)
(count (into #{} (keys *3)))
(require '[clojure.pprint :as pp])
(require '[create-soil-database.core :as c] :reload)
(c/soil-classes-to-id c/insert-seq*)
(first c/insert-seq)
(take 10 c/insert-seq)
(pp/pprint (take 10 c/insert-seq))
(require '[create-soil-database.core :as c] :reload)
(pp/pprint (take 10 c/insert-seq))
(soil-classes-iseq (c/soil-classes-to-id c/insert-seq*))
(c/soil-classes-iseq (c/soil-classes-to-id c/insert-seq*))
(pp/pprint *1)
(require '[create-soil-database.core :as c] :reload)
(c/soil-classes-iseq (c/soil-classes-to-id c/insert-seq*))
(pp/pprint *1)
(c/soil-classes-iseq (c/soil-classes-to-id c/insert-seq*))
(c/do-insert-at-once :soil_class *1)
(first c/insert-seq)
(take 10 c/insert-seq)
(c/do-insert-at-once :soil_class c/insert-seq)
(c/do-insert-at-once :soil_data c/insert-seq)
(require '[create-soil-database.core :as c] :reload)
(c/do-insert-at-once :soil_data c/insert-seq)
(c/do-check c/insert-seq)
pp/pprint *1
(pp/pprint *2)
(require '[create-soil-database.core :as c] :reload)
(c/do-check c/insert-seq)
((first *1))
(c/do-check c/insert-seq)
(require '[create-soil-database.core :as c] :reload)
(c/do-check c/insert-seq)
(require '[create-soil-database.core :as c] :reload)
(c/do-check c/insert-seq)
(c/do-insert-at-once :soil_data c/insert-seq)
(filter (fn [{h-id :horizon_id}] (nil? h-id)) c/insert-seq)
(require '[create-soil-database.core :as c] :reload)
(filter (fn [{h-id :horizon_id}] (nil? h-id)) c/insert-seq)
(require '[create-soil-database.core :as c] :reload)
(filter (fn [{h-id :horizon_id}] (nil? h-id)) c/insert-seq)
(c/do-insert-at-once :soil_data c/insert-seq)
(filter (fn [{v :bulk_density_t_per_m3}] (nil? v)) c/insert-seq)
(require '[create-soil-database.core :as c] :reload)
(filter (fn [{v :bulk_density_t_per_m3}] (nil? v)) c/insert-seq)
(c/do-insert-at-once :soil_data c/insert-seq)
(c/overlapping-depths c/insert-seq)
(require '[create-soil-database.core :as c] :reload)
(c/overlapping-depths c/insert-seq)
(require '[create-soil-database.core :as c] :reload)
(c/do-insert-at-once :soil_data c/insert-seq)
(require '[create-soil-database.core :as c] :reload)
(filter (fn [{v :bulk_density_t_per_m3}] (nil? v)) c/insert-seq)
(filter (fn [{h-id :horizon_id}] (nil? h-id)) c/insert-seq)
(c/overlapping-depths c/insert-seq)
(c/do-insert-at-once :soil_data c/insert-seq)
(c/do-check c/insert-seq)
(count c/insert-seq)
(count (into #{} (map (fn [m] {:lat (:lat_times_10000 m) :lng (:lng_times_10000 m) :h-id (:horizon_id m)}) c/insert-seq)))
(first c/insert-seq)
(into #{} (map (fn [m] {:lat (:lat_times_10000 m) :lng (:lng_times_10000 m) :h-id (:horizon_id m)}) c/insert-seq))
(count c/insert-seq)
(into #{} (map (fn [m] {:lat (:lat_times_10000 m) :lng (:lng_times_10000 m) :h-id (:horizon_id m)}) c/insert-seq))
(count *1)
(first c/insert-seq)
(c/do-insert-at-once :soil_data c/insert-seq)
(c/soil-classes-to-id c/insert-seq*)
(c/soil-classes-iseq *1)
(c/do-insert-at-once :soil_class *1)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(take 10 (range))
(partition 2 [1 2 3 4 5 6])
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(interleave (range) [1 2 3 4])
(require '[create-climate-database.core :as ccd] :reload)
(interleave (range) [1 2 3 4])
(ccd/insert-raster-points)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(for [d (range 10 100)] (/ 2545 d))
(map type *1)
(for [d (range 100)] (/ 2545 d))
(for [d (range 1 100)] (/ 2545 d))
(map type *1)
(for [d (range 1 500)] (/ 2545 d))
(map type *1)
(filter #(= clojure.lang.long %) *1)
(filter #(= clojure.lang.Long %) *2)
clojure.lang.LOng
clojure.lang.Long
(for [d (range 1 500)] (/ 2545 d))
(map type *1)
(filter #(= java.lang.Long %) *2)
(for [d (range 1 500)] (/ 1928 d))
(map type *1)
(for [d (range 1 500)] (/ 1928 d))
(map (fn [v] [(type v] v]) *1)
(for [d (range 1 500)] (/ 1928 d))
(map (fn [v] [(type v) v]) *1)
(filter (fn [[t v]] (= java.lang.Long t)) *1)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(take-nth 3 (range 1 13))
(take-nth 3 (range 13))
(take-nth 509 (range 2545))
(take-nth 509 (range 2546))
(take-nth 508 (range 2546))
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(ccd/insert-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(ccd/insert-empty-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-empty-data)
(ccd/insert-empty-data 2010)
(ccd/insert-raster-points)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-empty-data 2010)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(ccd/insert-empty-data 2010)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/insert-raster-points)
(ccd/insert-empty-data 2010)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data* "helge_era_interim_data_interpolated_for_target_region/2010_N_asc" 2010 :precip)
(ccd/update-data* "helge_era_interim_data_interpolated_for_target_region/2010_WIND_asc" 2010 :windspeed)
(ccd/update-data* "helge_era_interim_data_interpolated_for_target_region/TEST_2010_RH_asc" 2010 :rel-hum)
(require '[create-climate-database.core :as ccd] :reload)
(ccd/update-data* "helge_era_interim_data_interpolated_for_target_region/2010_t2m_hk_asc" 2010 :t-avg)
(ccd/update-data* "helge_era_interim_data_interpolated_for_target_region/2010_tmax_asc" 2010 :t-max)
(ccd/update-data* "helge_era_interim_data_interpolated_for_target_region/2010_tmin_asc" 2010 :t-min)
